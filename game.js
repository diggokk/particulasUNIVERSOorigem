// =============================================
// CONFIGURA√á√ïES DO JOGO (TODAS AS MELHORIAS)
// =============================================
const config = {
    particleCount: 150,
    mouseRadius: 150,
    particleRespawn: {
        minParticles: 50,  // N√∫mero m√≠nimo de part√≠culas para ativar o respawn
        respawnAmount: 20, // Quantidade de part√≠culas criadas por respawn
        checkInterval: 60  // Verifica a cada X frames (60 = ~1 segundo se 60FPS)
    },
    galaxies: {
        unlocked: ['classic'],
        current: 'classic',
        list: {
            classic: {
                name: "Cl√°ssico",
                description: "O universo original de part√≠culas",
                unlockCondition: "Inicial",
                particleColorRange: { h: [0, 360], s: [80, 90], l: [50, 70] },
                background: 'radial-gradient(ellipse at bottom, #1B2735 0%, #090A0F 100%)'
            },
            neon: {
                name: "Neon",
                description: "Cores vibrantes e part√≠culas brilhantes",
                unlockCondition: "Alcan√ßar n√≠vel 5",
                particleColorRange: { h: [280, 320], s: [100, 100], l: [60, 80] },
                background: 'radial-gradient(ellipse at bottom, #0f0c29 0%, #302b63 50%, #24243e 100%)'
            },
            fire: {
                name: "Inferno",
                description: "Part√≠culas flamejantes e inimigos furiosos",
                unlockCondition: "Derrotar 50 inimigos",
                particleColorRange: { h: [10, 40], s: [80, 100], l: [50, 70] },
                background: 'radial-gradient(ellipse at bottom, #200122 0%, #6f0000 100%)'
            }
        }
    },
    xp: 0,
    level: 1,
    power: 1,
    health: 100,
    maxHealth: 100,
    bigBang: {
        unlocked: false,
        availableEvery: 15,
        nextUnlockLevel: 15,
        cooldown: 0,
        maxCooldown: 300,
        active: false
    },
    isBigBangActive: false,
    players: [
        {
            id: 1,
            x: null,
            y: null,
            mode: 'normal',
            color: '#4A00E0',
            radius: 150,
            size: 30,
            face: "üê∂",
            faceSize: 28,
            power: 1,
            health: 100,
            maxHealth: 100,
            active: true,
            lastModeChange: 0,
            damage: 0.5,
            skills: {
                attractRadius: 1,
                vortexPower: 1,
                doubleVortex: false,
                healthBoost: 1,
                bigBangPower: 1
            }
        },
        {
            id: 2,
            x: null,
            y: null,
            mode: 'normal',
            color: '#00F5A0',
            radius: 150,
            size: 30,
            face: "üê±",
            faceSize: 28,
            power: 1,
            health: 100,
            maxHealth: 100,
            active: false,
            lastModeChange: 0,
            damage: 0.5,
            skills: {
                attractRadius: 1,
                vortexPower: 1,
                doubleVortex: false,
                healthBoost: 1,
                bigBangPower: 1
            }
        }
    ],
    coopMode: false,
    soundEnabled: true,
    gamePaused: false,
    wave: {
        number: 1,
        enemiesToSpawn: 5,
        spawned: 0,
        timer: 0,
        update: function() {
            if(this.spawned < this.enemiesToSpawn && this.timer++ > 60) {
                spawnEnemy();
                this.spawned++;
                this.timer = 0;
            }

            if(enemies.length === 0 && this.spawned >= this.enemiesToSpawn) {
                this.number++;
                this.enemiesToSpawn = 5 + this.number * 2;
                this.spawned = 0;
                showUnlockMessage(`Onda ${this.number} come√ßando!`);
                updateStatsPanel();
                updateQuest('wave5', 1);
            }
        }
    },
    particlesAbsorbed: 0,
    enemiesDestroyed: 0,
    gameTime: 0,
    isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
    comboCount: 0,
    lastAbsorptionTime: 0,
    screenShakeIntensity: 0,
    enemySystem: {
        spawnRate: 180,
        baseHealth: 3,
        baseSize: 20,
        eliteSizeMultiplier: 1.3,
        healthIncreasePerLevel: 0.3,
        types: {
            normal: { 
                chance: 0.5, 
                speed: 2.0, 
                behavior: 'wander', 
                face: [">:(", "X_X", ">_<", ":O"],
                color: '#FF5555'
            },
            hunter: { 
                chance: 0.3, 
                speed: 3.0, 
                behavior: 'hunt', 
                face: ["https://www.google.com/imgres?q=buraco%20negro&imgurl=https%3A%2F%2Ffly.metroimg.com%2Fupload%2Fq_85%2Cw_700%2Fhttps%3A%2F%2Fuploads.metroimg.com%2Fwp-content%2Fuploads%2F2022%2F11%2F25095819%2Fburaco-negro-6.jpg&imgrefurl=https%3A%2F%2Fwww.metropoles.com%2Fmundo%2Fciencia-e-tecnologia-int%2Fcientistas-criam-buraco-negro-dentro-de-laboratorio-para-provar-teoria&docid=t0pWUha06AweoM&tbnid=gNx5H7iireLtgM&vet=12ahUKEwiD7ZjWuMGPAxVJpJUCHSopKW4QM3oECBgQAA..i&w=700&h=467&hcb=2&ved=2ahUKEwiD7ZjWuMGPAxVJpJUCHSopKW4QM3oECBgQAA", "‚óâ_‚óâ", "‚äô_‚äô", "‚öÜ_‚öÜ"],
                color: '#FF0000',
                huntRadius: 300
            },
            cosmic: { 
                chance: 0.15, 
                speed: 1.8, 
                behavior: 'teleport', 
                face: ["‚òÑÔ∏è", "üåå", "üå†", "‚ú®"], 
                special: 'shield',
                color: '#00AAFF',
                teleportChance: 0.008
            },
            ancient: { 
                chance: 0.05, 
                speed: 1.0, 
                behavior: 'orbit', 
                face: ["üëÅÔ∏è", "üúè", "‚öö", "‚ôÜ"], 
                special: 'healer',
                color: '#AA00FF',
                orbitDistance: 100
            }
        },
        eliteMultiplier: 1.5,
        blackHoleChance: 0.02
    },
    quests: {
        active: [
            { id: 'absorb100', target: 100, current: 0, reward: 50, title: "Absorver 100 part√≠culas" },
            { id: 'defeat20', target: 20, current: 0, reward: 100, title: "Derrotar 20 inimigos" },
            { id: 'wave5', target: 5, current: 1, reward: 200, title: "Alcan√ßar onda 5" }
        ],
        completed: []
    },
    soundEffects: {},
    skills: {
        unlocked: [],
        tree: {
            attractRadius: { 
                name: "Raio de Atra√ß√£o", 
                cost: 2, 
                maxLevel: 5, 
                effect: "Aumenta o raio de atra√ß√£o em 20% por n√≠vel",
                currentLevel: 0 
            },
            vortexPower: { 
                name: "Poder do V√≥rtice", 
                cost: 3, 
                maxLevel: 3, 
                effect: "Aumenta a for√ßa do v√≥rtice em 30% por n√≠vel",
                currentLevel: 0 
            },
            healthBoost: { 
                name: "Vitalidade", 
                cost: 1, 
                maxLevel: 10, 
                effect: "Aumenta sa√∫de m√°xima em 10% por n√≠vel",
                currentLevel: 0 
            },
            bigBangPower: { 
                name: "Big Bang Plus", 
                cost: 5, 
                maxLevel: 2, 
                effect: "Aumenta o XP ganho com Big Bang em 50% por n√≠vel",
                currentLevel: 0 
            },
            particleMastery: { 
                name: "Dom√≠nio de Part√≠culas", 
                cost: 4, 
                maxLevel: 3, 
                effect: "Part√≠culas d√£o 20% mais XP",
                currentLevel: 0,
                requires: ["attractRadius:3"] 
            }
        }
    },
    skillPoints: 0,
    story: {
        enabled: true,
        currentScene: 0,
        scenes: [
            {
                npc: "üëÅÔ∏è",
                text: "MORTAL... VOC√ä OUSA INVADIR MEU UNIVERSO?",
                background: "radial-gradient(ellipse at center, #200122 0%, #6f0000 100%)",
                effect: "terror" // Ativa modo terror
            },
            {
                npc: "üëÅÔ∏è",
                text: "EU SOU AZATHOTH, O DEVORADOR DE GAL√ÅXIAS...",
                background: "radial-gradient(ellipse at center, #000000 0%, #4a0000 100%)",
                effect: "terror"
            },
            {
                npc: "üëΩ",
                text: "*sussurro* Psst... N√£o olhe diretamente para ele! Use as part√≠culas para se fortalecer...",
                background: "radial-gradient(ellipse at center, #1B2735 0%, #090A0F 100%)",
                effect: "normal"
            },
            {
                npc: "üëÅÔ∏è",
                text: "SEU DESTINO √â SER DESTRU√çDO COMO TODOS OS OUTROS!",
                background: "radial-gradient(ellipse at center, #300000 0%, #000000 100%)",
                effect: "terror",
                shake: true // Ativa tremor de tela
            }
        ]
    },
    npc: {
        active: true,
        currentDialog: 0,
        dialogs: [
            "Ah, finalmente acordou... Tava demorando, hein?",
            "Olha s√≥, um novato no universo. Vamos ver quanto tempo voc√™ dura...",
            "Cuidado com essas part√≠culas, elas s√£o mais espertas do que parecem!",
            "T√° com medo? Eu tamb√©m estaria...",
            "Se voc√™ chegar no n√≠vel 50, algo MUITO grande te espera...",
            "Voc√™ realmente acha que est√° no controle? Kkk...",
            "Pressione 1, 2 ou 3... se conseguir lembrar qual √© qual.",
            "J√° tentou o Big Bang? Ou ainda n√£o √© digno?",
            "Os inimigos est√£o rindo de voc√™... literalmente.",
            "Voc√™ √© lento... mas pelo menos √© consistente.",
            // NOVOS DI√ÅLOGOS ADICIONADOS:
            "Sabia que cada gal√°xia tem suas pr√≥prias leis da f√≠sica? Divertido, n√©?",
            "Eu j√° vi jogadores melhores... mas tamb√©m vi piores.",
            "Quer um conselho? N√£o confie nas part√≠culas roxas.",
            "O modo cooperativo √© para quem n√£o consegue sozinho... igual voc√™!",
            "J√° perdi a conta de quantos universos eu vi serem destru√≠dos...",
            "Voc√™ est√° evoluindo... mas ainda tem muito o que aprender.",
            "As habilidades que voc√™ desbloqueia s√£o s√≥ a ponta do iceberg!",
            "N√≠vel 100? Isso √© s√≥ o tutorial, meu caro...",
            "Os inimigos est√£o ficando mais fortes... ou voc√™ que est√° ficando mais fraco?",
            "Voc√™ nota como o universo reage √†s suas a√ß√µes? Interessante..."
        ],
        bossDialog: "üèÜ PARAB√âNS! Agora o verdadeiro desafio come√ßa... üêâ"
    },
    skins: {
        available: [
            {
                id: 'default',
                name: 'Viajante',
                emoji: 'üê∂',
                type: 'normal',
                unlocked: true
            },
            {
                id: 'cosmic',
                name: 'Ser C√≥smico',
                emoji: 'üëΩ',
                type: 'premium',
                unlocked: false,
                unlockCondition: 'Alcan√ßar n√≠vel 10'
            },
            {
                id: 'nebula',
                name: 'Nebulosa',
                emoji: 'üåå',
                type: 'normal',
                unlocked: true
            },
            {
                id: 'blackhole',
                name: 'Buraco Negro',
                emoji: '‚ö´',
                type: 'premium',
                unlocked: false,
                unlockCondition: 'Derrotar 100 inimigos'
            },
            {
                id: 'ancient',
                name: 'Antigo',
                emoji: 'üëÅÔ∏è',
                type: 'premium',
                unlocked: false,
                unlockCondition: 'Completar todas as miss√µes'
            }
        ],
        current: 'default'
    }
};

// =============================================
// VARI√ÅVEIS GLOBAIS
// =============================================
const canvas = document.getElementById("canvas");
const ctx = canvas.getContext("2d");
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

let particles = [];
let enemies = [];
let lastUpdateIndex = 0;
let lastTime = 0;
let fps = 60;
let fpsLastChecked = 0;
let frameCount = 0;
let gameLoopRunning = false;

// =============================================
// FUN√á√ïES DO JOGO (TODAS AS MELHORIAS)
// =============================================

// 1. SISTEMA DE INIMIGOS
function spawnEnemy() {
    try {
        // Seleciona tipo de inimigo baseado nas chances
        let random = Math.random();
        let typeKey = 'normal';
        let cumulativeChance = 0;
        
        for (const [key, type] of Object.entries(config.enemySystem.types)) {
            cumulativeChance += type.chance;
            if (random <= cumulativeChance) {
                typeKey = key;
                break;
            }
        }
        
        const type = config.enemySystem.types[typeKey];
        const isElite = Math.random() < 0.1;
        
        const enemy = {
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            type: typeKey,
            health: config.enemySystem.baseHealth + 
                   (config.wave.number * config.enemySystem.healthIncreasePerLevel),
            speed: type.speed * (isElite ? config.enemySystem.eliteMultiplier : 1),
            face: type.face[Math.floor(Math.random() * type.face.length)],
            isElite,
            behavior: type.behavior,
            color: type.color,
            size: config.enemySystem.baseSize * (isElite ? config.enemySystem.eliteSizeMultiplier : 1)
        };
        
        // Adiciona propriedades espec√≠ficas do tipo
        if (typeKey === 'hunter') enemy.huntRadius = type.huntRadius;
        if (typeKey === 'cosmic') enemy.teleportChance = type.teleportChance;
        if (typeKey === 'ancient') enemy.orbitDistance = type.orbitDistance;
        
        enemies.push(enemy);
        updateStatsPanel();
        return enemy;
    } catch (error) {
        console.error("Erro ao spawnar inimigo:", error);
        return null;
    }
}

function updateEnemies(deltaTime) {
    const player = config.players[0];
    
    enemies.forEach(enemy => {
        // Comportamento baseado no tipo
        switch(enemy.behavior) {
            case 'hunt':
                // Persegue o jogador apenas dentro do raio de detec√ß√£o
                const dx = player.x - enemy.x;
                const dy = player.y - enemy.y;
                const distSq = dx*dx + dy*dy;
                const dist = Math.sqrt(distSq);
                
                if (dist > 0 && dist < enemy.huntRadius) {
                    enemy.x += (dx / dist) * enemy.speed * (deltaTime / 16.67);
                    enemy.y += (dy / dist) * enemy.speed * (deltaTime / 16.67);
                } else {
                    // Movimento aleat√≥rio quando n√£o est√° perseguindo
                    enemy.x += (Math.random() - 0.5) * enemy.speed * 0.5 * (deltaTime / 16.67);
                    enemy.y += (Math.random() - 0.5) * enemy.speed * 0.5 * (deltaTime / 16.67);
                }
                break;
                
            case 'teleport':
                // Movimento normal com chance de teletransporte
                enemy.x += (Math.random() - 0.5) * enemy.speed * (deltaTime / 16.67);
                enemy.y += (Math.random() - 0.5) * enemy.speed * (deltaTime / 16.67);
                
                if (Math.random() < enemy.teleportChance) {
                    enemy.x = Math.random() * canvas.width;
                    enemy.y = Math.random() * canvas.height;
                }
                break;
                
            case 'orbit':
                // Orbita o jogador mantendo dist√¢ncia
                const angle = Math.atan2(player.y - enemy.y, player.x - enemy.x);
                const targetX = player.x + Math.cos(angle + Math.PI/2) * enemy.orbitDistance;
                const targetY = player.y + Math.sin(angle + Math.PI/2) * enemy.orbitDistance;
                
                enemy.x += (targetX - enemy.x) * 0.05 * (deltaTime / 16.67);
                enemy.y += (targetY - enemy.y) * 0.05 * (deltaTime / 16.67);
                break;
                
            default: // 'wander'
                // Movimento aleat√≥rio mais suave
                enemy.x += (Math.random() - 0.5) * enemy.speed * (deltaTime / 16.67);
                enemy.y += (Math.random() - 0.5) * enemy.speed * (deltaTime / 16.67);
        }
        
        // Mant√©m dentro da tela com margem
        enemy.x = Math.max(10, Math.min(canvas.width - 10, enemy.x));
        enemy.y = Math.max(10, Math.min(canvas.height - 10, enemy.y));
        
        // Verifica colis√£o com jogador
        const distToPlayer = Math.sqrt(
            Math.pow(enemy.x - player.x, 2) + 
            Math.pow(enemy.y - player.y, 2)
        );
        
        if (distToPlayer < (player.size + enemy.size) * 0.6) {
            player.health -= 0.3 * (deltaTime / 16.67);
            updateHealthBar();
            
            // Feedback visual
            if (Date.now() % 200 < 50) {
                document.getElementById('health-bar').style.opacity = '0.5';
            } else {
                document.getElementById('health-bar').style.opacity = '1';
            }

            // Verifica se o jogador morreu
            if (player.health <= 0) {
                player.health = 0;
                updateHealthBar();
                showGameOver();
            }
        }
    });
}

// 2. SISTEMA DE PART√çCULAS (COM RESPAWN AUTOM√ÅTICO)
const particlePool = [];

function getParticle(x, y) {
    // Posi√ß√µes aleat√≥rias longe do jogador (evita spawn na frente)
    const spawnPadding = 200;
    let posX, posY;
    
    do {
        posX = x !== undefined ? x : Math.random() * canvas.width;
        posY = y !== undefined ? y : Math.random() * canvas.height;
    } while (
        Math.abs(posX - config.players[0].x) < spawnPadding && 
        Math.abs(posY - config.players[0].y) < spawnPadding
    );

    if (particlePool.length > 0) {
        const p = particlePool.pop();
        p.x = posX;
        p.y = posY;
        p.size = Math.random() * 4 + 2;
        p.color = `hsl(${Math.random() * 360}, 80%, 60%)`;
        p.speedX = (Math.random() - 0.5) * 3;
        p.speedY = (Math.random() - 0.5) * 3;
        p.baseSpeedX = p.speedX;
        p.baseSpeedY = p.speedY;
        p.trail = [];
        p.life = undefined;
        return p;
    }
    return createParticle(posX, posY);
}

function createParticle(x, y) {
    const types = [
        { color: `hsl(${Math.random() * 60 + 180}, 80%, 60%)`, size: 3, xp: 1 }, // Normal
        { color: `hsl(${Math.random() * 60 + 60}, 80%, 60%)`, size: 5, xp: 2 }, // Grande
        { color: `hsl(${Math.random() * 60 + 300}, 80%, 60%)`, size: 2, xp: 3, special: 'speed' }, // R√°pida
        { color: 'white', size: 6, xp: 5, special: 'heal' } // Cura
    ];
    
    const type = Math.random() > 0.8 ? types[Math.floor(Math.random() * types.length)] : types[0];
    
    return {
        x: x,
        y: y,
        size: type.size,
        color: type.color,
        xpValue: type.xp,
        special: type.special,
        speedX: (Math.random() - 0.5) * (type.special === 'speed' ? 6 : 3),
        speedY: (Math.random() - 0.5) * (type.special === 'speed' ? 6 : 3),
        trail: []
    };
}

function initParticles() {
    particles = [];
    for (let i = 0; i < config.particleCount; i++) {
        particles.push(getParticle());
    }
}

function autoRespawnParticles() {
    if (particles.length < config.particleRespawn.minParticles) {
        for (let i = 0; i < config.particleRespawn.respawnAmount; i++) {
            const p = getParticle();
            p.size = 3; // Part√≠culas come√ßam grandes
            p.targetSize = p.size; // Tamanho original
            particles.push(p);
        }
        playSound('respawn');
    }
}

function updateParticles(deltaTime) {
    const player = config.players[0];
    const updatesThisFrame = Math.min(100, particles.length);
    
    for (let i = 0; i < updatesThisFrame; i++) {
        const idx = (lastUpdateIndex + i) % particles.length;
        const p = particles[idx];
        
        // Reduz tamanho se for part√≠cula respawnada
        if (p.size > (p.targetSize || 3)) {
            p.size -= 0.1;
        }
        
        // Movimento b√°sico
        p.x += p.speedX * (deltaTime / 16.67);
        p.y += p.speedY * (deltaTime / 16.67);
        
        // Intera√ß√£o com o jogador
        const dx = player.x - p.x;
        const dy = player.y - p.y;
        const distSq = dx*dx + dy*dy;
        const dist = Math.sqrt(distSq);
        
        if (distSq < player.radius*player.radius) {
            // Efeito de suc√ß√£o quando muito pr√≥ximo (20% do raio)
            const suctionRadius = player.radius * 0.2;
            const isVeryClose = dist < suctionRadius;
            
            // Modo atra√ß√£o - efeito mais forte quando perto
            if (player.mode === 'attract') {
                const force = isVeryClose ? 0.5 : 0.1; // Mais forte quando perto
                const nx = dx/dist;
                const ny = dy/dist;
                
                p.speedX += nx * force * (1 - dist/player.radius) * (deltaTime / 16.67);
                p.speedY += ny * force * (1 - dist/player.radius) * (deltaTime / 16.67);
                
                // Absorve a part√≠cula se estiver muito perto
                if (isVeryClose && dist < player.size * 0.8) {
                    // Ganha XP baseado no tipo de part√≠cula
                    const xpGain = p.xpValue || 1;
                    config.xp += xpGain;
                    config.particlesAbsorbed++;
                    
                    // Toca som
                    playSound('absorb');
                    
                    // Remove a part√≠cula
                    particlePool.push(particles.splice(idx, 1)[0]);
                    updateXPBar();
                    updateStatsPanel();
                    updateQuest('absorb100');
                    checkLevelUp();
                    continue; // Pula para a pr√≥xima part√≠cula
                }
            }
            // Modo repuls√£o (mantido igual)
            else if (player.mode === 'repel') {
                const nx = dx/dist;
                const ny = dy/dist;
                p.speedX -= nx * 0.2 * (1 - dist/player.radius) * (deltaTime / 16.67);
                p.speedY -= ny * 0.2 * (1 - dist/player.radius) * (deltaTime / 16.67);
            }
        }
        
        // Limites da tela
        if (p.x < 0 || p.x > canvas.width) p.speedX *= -0.8;
        if (p.y < 0 || p.y > canvas.height) p.speedY *= -0.8;
        
        // Atualiza trilha
        p.trail.push({x: p.x, y: p.y, size: p.size});
        if (p.trail.length > 5) p.trail.shift();
    }
    
    lastUpdateIndex = (lastUpdateIndex + updatesThisFrame) % particles.length;
}

// 3. SISTEMA DE BIG BANG
function checkBigBangUnlock() {
    // Verifica se o jogador alcan√ßou um n√≠vel de desbloqueio
    if (config.level >= config.bigBang.nextUnlockLevel && !config.bigBang.unlocked) {
        config.bigBang.unlocked = true;
        config.bigBang.nextUnlockLevel += config.bigBang.availableEvery;
        showUnlockMessage("HABILIDADE DESBLOQUEADA: Big Bang C√≥smico! (Barra de Espa√ßo)");
        
        // Ativa o bot√£o do Big Bang
        document.getElementById('bigbang-btn').style.display = 'flex';
        updateBigBangRequirement();
    }
}

function activateBigBang() {
    // Verifica se est√° desbloqueado e dispon√≠vel
    if (!config.bigBang.unlocked || config.bigBang.cooldown > 0 || config.bigBang.active) {
        if (!config.bigBang.unlocked) {
            showUnlockMessage(`Desbloqueie o Big Bang no n√≠vel ${config.bigBang.nextUnlockLevel}`);
        }
        return;
    }
    
    config.bigBang.active = true;
    config.gamePaused = true;
    
    // Mostra mensagem dram√°tica
    const message = document.getElementById('big-bang-message');
    message.style.opacity = '1';
    
    // Toca o som
    playSound('bigBang');
    
    // Fase 1: Prepara√ß√£o (3 segundos)
    setTimeout(() => {
        // Remove a mensagem
        message.style.opacity = '0';
        
        // Cria a supernova
        const supernova = document.getElementById('supernova');
        const shockwave = document.getElementById('shockwave');
        
        // Configura a supernova
        supernova.style.width = '0';
        supernova.style.height = '0';
        supernova.style.opacity = '1';
        
        // Anima√ß√£o de crescimento da supernova
        const growSupernova = () => {
            const size = parseInt(supernova.style.width || '0') + 10;
            supernova.style.width = `${size}px`;
            supernova.style.height = `${size}px`;
            
            if (size < 300) {
                requestAnimationFrame(growSupernova);
            } else {
                // Explos√£o final
                explodeSupernova();
            }
        };
        
        growSupernova();
        
        // Configura a shockwave
        shockwave.style.animation = 'shockwave 1.5s forwards';
        
    }, 3000);
    
    function explodeSupernova() {
        // Efeito visual de explos√£o
        const supernova = document.getElementById('supernova');
        supernova.style.animation = 'supernova-explosion 1s forwards';
        
        // Flash branco
        document.body.style.animation = 'cosmic-flash 0.5s';
        
        // Tremor de tela intenso
        document.body.classList.add('camera-shake');
        
        // Efeitos de part√≠culas (expandir todas para fora)
        particles.forEach(p => {
            const angle = Math.atan2(p.y - config.players[0].y, p.x - config.players[0].x);
            const force = 20 + Math.random() * 10;
            p.speedX = Math.cos(angle) * force;
            p.speedY = Math.sin(angle) * force;
        });
        
        // Remove inimigos e concede XP
        enemies.forEach(enemy => {
            config.xp += enemy.isElite ? 5 : 2;
            config.enemiesDestroyed++;
            updateQuest('defeat20');
        });
        enemies = [];
        
        // Atualiza UI
        updateXPBar();
        updateStatsPanel();
        
        // Fim dos efeitos (2 segundos depois)
        setTimeout(() => {
            document.body.classList.remove('camera-shake');
            supernova.style.opacity = '0';
            supernova.style.animation = '';
            document.body.style.animation = '';
            
            // Reseta cooldown
            config.bigBang.cooldown = config.bigBang.maxCooldown;
            document.getElementById('bigbang-btn').classList.remove('bigbang-ready');
            config.bigBang.active = false;
            config.gamePaused = false;
            
            // Verifica se subiu de n√≠vel com a recompensa
            checkLevelUp();
            
            // Esconde o bot√£o at√© o pr√≥ximo desbloqueio se for o caso
            if (config.level < config.bigBang.nextUnlockLevel) {
                document.getElementById('bigbang-btn').style.display = 'none';
                config.bigBang.unlocked = false;
            }
        }, 2000);
    }
}

function updateBigBangCooldownUI() {
    if (!config.bigBang.unlocked) return;
    
    const progress = (1 - (config.bigBang.cooldown / config.bigBang.maxCooldown)) * 100;
    document.getElementById('bigbang-progress').style.width = `${progress}%`;
    document.querySelector('.cooldown-overlay').style.width = `${100 - progress}%`;
    
    if (config.bigBang.cooldown === 0) {
        document.getElementById('bigbang-btn').classList.add('bigbang-ready');
    }
}

function updateBigBangRequirement() {
    const requirementEl = document.getElementById('bigbang-requirement');
    
    if (config.bigBang.unlocked) {
        requirementEl.textContent = `Pr√≥ximo em n√≠vel ${config.bigBang.nextUnlockLevel}`;
    } else {
        requirementEl.textContent = `Desbloqueie no n√≠vel ${config.bigBang.nextUnlockLevel}`;
    }
}

// 4. SISTEMA DE MENU E CONTROLES
function setupControls() {
    // Fecha menu quando clicar fora
    document.addEventListener('click', (e) => {
        const menu = document.getElementById('menu');
        if (menu.style.display === 'block' && !e.target.closest('#menu') && e.target.id !== 'menu-toggle') {
            menu.style.display = 'none';
        }
    });

    // Menu toggle
    document.getElementById('menu-toggle').addEventListener('click', (e) => {
        e.stopPropagation();
        const menu = document.getElementById('menu');
        menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
    });

    // Controle delegado para todos os itens do menu
    document.getElementById('menu').addEventListener('click', (e) => {
        const menuItem = e.target.closest('.menu-item');
        if (!menuItem) return;

        const action = menuItem.getAttribute('data-action');
        const mode = menuItem.getAttribute('data-mode');

        switch(action) {
            case 'setMode':
                setPlayerMode(mode);
                highlightActiveMode();
                break;
                
            case 'toggleCoop':
                toggleCoopMode();
                break;
                
            case 'showGalaxies':
                showGalaxyMap();
                break;
                
            case 'showSkills':
                showSkillTree();
                break;
                
            case 'showSkins':
                showSkinsModal();
                break;
                
            case 'resetGame':
                resetGame();
                break;
                
            case 'toggleSound':
                toggleSound();
                break;
        }
    });

    // Bot√£o Big Bang
    document.getElementById('bigbang-btn').addEventListener('click', activateBigBang);

    // Controles mobile
    if (config.isMobile) {
        document.getElementById('mobileAttract').addEventListener('touchstart', (e) => {
            e.preventDefault();
            config.players[0].mode = 'attract';
            e.target.classList.add('active');
        });
        
        document.getElementById('mobileRepel').addEventListener('touchstart', (e) => {
            e.preventDefault();
            config.players[0].mode = 'repel';
            e.target.classList.add('active');
        });
        
        document.getElementById('mobileVortex').addEventListener('touchstart', (e) => {
            e.preventDefault();
            config.players[0].mode = 'vortex';
            e.target.classList.add('active');
        });
        
        // Reset ao soltar
        ['mobileAttract', 'mobileRepel', 'mobileVortex'].forEach(id => {
            const btn = document.getElementById(id);
            btn.addEventListener('touchend', (e) => {
                e.preventDefault();
                config.players[0].mode = 'normal';
                btn.classList.remove('active');
            });
        });
    }
    
    // Controles de teclado
    window.addEventListener('keydown', (e) => {
        if (config.gamePaused) return;
        
        const player2 = config.players[1];
        const speed = 5;
        
        // Controles do jogador 2 (WASD)
        if (config.coopMode && player2.active) {
            switch(e.key.toLowerCase()) {
                case 'w': player2.y -= speed; break;
                case 'a': player2.x -= speed; break;
                case 's': player2.y += speed; break;
                case 'd': player2.x += speed; break;
            }
        }
        
        // Controles do jogador 1 (1-3 e espa√ßo)
        switch(e.key) {
            case '1': 
                config.players[0].mode = 'attract';
                document.getElementById('mobileAttract')?.classList.add('active');
                break;
            case '2': 
                config.players[0].mode = 'repel';
                document.getElementById('mobileRepel')?.classList.add('active');
                break;
            case '3': 
                config.players[0].mode = 'vortex';
                document.getElementById('mobileVortex')?.classList.add('active');
                break;
            case ' ': 
                activateBigBang();
                break;
        }
    });
    
    window.addEventListener('keyup', (e) => {
        if (['1', '2', '3'].includes(e.key)) {
            config.players[0].mode = 'normal';
            document.getElementById('mobileAttract')?.classList.remove('active');
            document.getElementById('mobileRepel')?.classList.remove('active');
            document.getElementById('mobileVortex')?.classList.remove('active');
        }
    });
    
    // Mouse/touch
    canvas.addEventListener('mousemove', (e) => {
        config.players[0].x = e.clientX;
        config.players[0].y = e.clientY;
    });
    
    canvas.addEventListener('touchmove', (e) => {
        e.preventDefault();
        const touch = e.touches[0];
        config.players[0].x = touch.clientX;
        config.players[0].y = touch.clientY;
    }, { passive: false });

    // Bot√£o de rein√≠cio
    document.getElementById('restart-btn').addEventListener('click', restartGame);

    // Fechar mapas
    document.getElementById('close-galaxy-map').addEventListener('click', () => {
        document.getElementById('galaxy-map').style.display = 'none';
    });

    document.getElementById('close-skill-tree').addEventListener('click', () => {
        document.getElementById('skill-tree').style.display = 'none';
    });

    // Modo Hist√≥ria
    document.getElementById('next-dialog-btn').addEventListener('click', nextStoryDialog);

    // Skins Modal
    document.getElementById('close-skins').addEventListener('click', () => {
        document.getElementById('skins-modal').style.display = 'none';
    });
}

function setPlayerMode(mode) {
    config.players[0].mode = mode;
    showUnlockMessage(`Modo ${getModeName(mode)} ativado`);
}

function getModeName(mode) {
    const names = {
        attract: 'Atra√ß√£o',
        repel: 'Repuls√£o',
        vortex: 'V√≥rtice',
        normal: 'Normal'
    };
    return names[mode] || mode;
}

function highlightActiveMode() {
    document.querySelectorAll('[data-action="setMode"]').forEach(item => {
        if (item.getAttribute('data-mode') === config.players[0].mode) {
            item.classList.add('active');
        } else {
            item.classList.remove('active');
        }
    });
}

function toggleCoopMode() {
    config.coopMode = !config.coopMode;
    config.players[1].active = config.coopMode;
    
    document.getElementById('coop-status').textContent = config.coopMode ? 'ON' : 'OFF';
    showUnlockMessage(`Modo Cooperativo ${config.coopMode ? 'ativado' : 'desativado'}`);
    
    // Posiciona o jogador 2 em uma posi√ß√£o inicial
    if (config.coopMode) {
        config.players[1].x = canvas.width * 0.3;
        config.players[1].y = canvas.height * 0.5;
    }
}

function toggleSound() {
    config.soundEnabled = !config.soundEnabled;
    document.getElementById('sound-status').textContent = config.soundEnabled ? 'ON' : 'OFF';
    
    // Atualiza todos os sons
    for (const sound of Object.values(config.soundEffects)) {
        sound.muted = !config.soundEnabled;
    }
    
    // Armazena prefer√™ncia
    localStorage.setItem('soundEnabled', config.soundEnabled);
    
    showUnlockMessage(`Som ${config.soundEnabled ? 'ligado' : 'desligado'}`);
}

function playSound(soundName) {
    try {
        if (config.soundEnabled && config.soundEffects[soundName]) {
            config.soundEffects[soundName].currentTime = 0;
            config.soundEffects[soundName].play().catch(e => console.log("Erro ao tocar som:", e));
        }
    } catch (error) {
        console.error("Erro no sistema de som:", error);
    }
}

// 5. SISTEMA DE GAL√ÅXIAS
function showGalaxyMap() {
    document.getElementById('menu').style.display = 'none';
    document.getElementById('galaxy-map').style.display = 'block';
    
    // Atualiza a lista de gal√°xias
    const galaxiesList = document.getElementById('galaxies-list');
    galaxiesList.innerHTML = '';
    
    for (const [key, galaxy] of Object.entries(config.galaxies.list)) {
        const galaxyEl = document.createElement('div');
        galaxyEl.className = `galaxy ${config.galaxies.unlocked.includes(key) ? 'unlocked' : 'locked'}`;
        galaxyEl.innerHTML = `
            <h3>${galaxy.name}</h3>
            <p>${galaxy.description}</p>
            ${!config.galaxies.unlocked.includes(key) ? 
              `<small>Requisito: ${galaxy.unlockCondition}</small>` : ''}
        `;
        
        if (config.galaxies.unlocked.includes(key)) {
            galaxyEl.addEventListener('click', () => {
                config.galaxies.current = key;
                document.body.style.background = galaxy.background;
                document.getElementById('galaxy-map').style.display = 'none';
                showUnlockMessage(`Gal√°xia ${galaxy.name} selecionada!`);
            });
        }
        
        galaxiesList.appendChild(galaxyEl);
    }
}

// 6. SISTEMA DE HABILIDADES
function showSkillTree() {
    document.getElementById('menu').style.display = 'none';
    document.getElementById('skill-tree').style.display = 'block';
    
    // Atualiza a lista de habilidades
    const skillsList = document.getElementById('skills-list');
    skillsList.innerHTML = '';
    
    for (const [key, skill] of Object.entries(config.skills.tree)) {
        const skillEl = document.createElement('div');
        skillEl.className = `skill ${skill.currentLevel > 0 ? 'unlocked' : 'locked'} 
                           ${skill.currentLevel >= skill.maxLevel ? 'maxed' : ''}`;
        
        skillEl.innerHTML = `
            <h3>${skill.name} (N√≠vel ${skill.currentLevel}/${skill.maxLevel})</h3>
            <p>${skill.effect}</p>
            <div class="skill-cost">Custo: ${skill.cost} pontos</div>
            ${skill.requires ? `<div class="skill-requires">Requer: ${skill.requires.join(', ')}</div>` : ''}
            ${skill.currentLevel < skill.maxLevel && 
              config.skillPoints > 0 &&
              (!skill.requires || checkSkillRequirements(skill.requires)) ?
              '<button class="upgrade-btn" data-skill="'+key+'">Melhorar</button>' : ''}
        `;
        
        skillsList.appendChild(skillEl);
    }
    
    // Adiciona eventos aos bot√µes de upgrade
    document.querySelectorAll('.upgrade-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const skillKey = this.getAttribute('data-skill');
            upgradeSkill(skillKey);
        });
    });
}

function checkSkillRequirements(requirements) {
    for (const req of requirements) {
        const [skillName, level] = req.split(':');
        if ((config.skills.tree[skillName]?.currentLevel || 0) < parseInt(level)) {
            return false;
        }
    }
    return true;
}

function upgradeSkill(skillKey) {
    const skill = config.skills.tree[skillKey];
    if (skill.currentLevel < skill.maxLevel && config.skillPoints >= skill.cost) {
        if (skill.requires && !checkSkillRequirements(skill.requires)) {
            showUnlockMessage("Requisitos n√£o atendidos!");
            return;
        }
        
        skill.currentLevel++;
        config.skillPoints -= skill.cost;
        showUnlockMessage(`${skill.name} melhorado para n√≠vel ${skill.currentLevel}!`);
        
        // Aplica efeitos da habilidade
        applySkillEffects();
        
        // Atualiza a √°rvore de habilidades
        showSkillTree();
    }
}

function applySkillEffects() {
    const skills = config.skills.tree;
    const player = config.players[0];
    
    // Atra√ß√£o
    player.radius = 150 * (1 + (skills.attractRadius.currentLevel * 0.2));
    
    // Sa√∫de
    player.maxHealth = 100 * (1 + (skills.healthBoost.currentLevel * 0.1));
    player.health = Math.min(player.health, player.maxHealth);
    updateHealthBar();
}

// 7. SISTEMA DE MISS√ïES
function updateQuest(questId, amount = 1) {
    const quest = config.quests.active.find(q => q.id === questId);
    if (quest) {
        quest.current += amount;
        
        // Atualiza a UI imediatamente
        updateQuestUI();
        
        if (quest.current >= quest.target) {
            config.xp += quest.reward;
            config.quests.completed.push(quest.id);
            config.quests.active = config.quests.active.filter(q => q.id !== questId);
            showUnlockMessage(`Miss√£o completa! +${quest.reward}XP`);
            
            // Verifica se subiu de n√≠vel com a recompensa
            checkLevelUp();
            
            // Adicionar nova miss√£o se for a de absorver part√≠culas
            if (quest.id === 'absorb100') {
                config.quests.active.push(
                    { id: 'absorb500', target: 500, current: config.particlesAbsorbed, reward: 250, title: "Absorver 500 part√≠culas" }
                );
                updateQuestUI();
            }
            else if (quest.id === 'defeat20') {
                config.quests.active.push(
                    { id: 'defeat50', target: 50, current: config.enemiesDestroyed, reward: 300, title: "Derrotar 50 inimigos" }
                );
                updateQuestUI();
            }
        }
    }
}

function updateQuestUI() {
    const container = document.getElementById('quests-container');
    container.innerHTML = '';
    
    config.quests.active.forEach(quest => {
        const progress = Math.min(100, (quest.current / quest.target) * 100);
        const questEl = document.createElement('div');
        questEl.className = 'quest-item';
        questEl.innerHTML = `
            <div>${quest.title}</div>
            <div class="quest-progress">
                <div class="quest-progress-bar" style="width: ${progress}%"></div>
            </div>
            <small>${quest.current}/${quest.target} (${Math.round(progress)}%)</small>
        `;
        container.appendChild(questEl);
    });
}

// 8. SISTEMA DE GAME OVER
function showGameOver() {
    // Pausa o jogo
    config.gamePaused = true;
    
    // Toca som de game over
    playSound('gameOver');
    
    // Preenche estat√≠sticas
    document.getElementById('go-level').textContent = config.level;
    document.getElementById('go-wave').textContent = config.wave.number;
    document.getElementById('go-particles').textContent = config.particlesAbsorbed;
    document.getElementById('go-enemies').textContent = config.enemiesDestroyed;
    
    // Cria estrelas de fundo
    createStars();
    
    // Mostra tela de game over
    document.getElementById('game-over-screen').style.display = 'flex';
}

function createStars() {
    const container = document.getElementById('game-over-stars');
    container.innerHTML = '';
    
    for (let i = 0; i < 100; i++) {
        const star = document.createElement('div');
        star.className = 'star';
        star.style.width = `${Math.random() * 3 + 1}px`;
        star.style.height = star.style.width;
        star.style.left = `${Math.random() * 100}%`;
        star.style.top = `${Math.random() * 100}%`;
        star.style.animationDelay = `${Math.random() * 5}s`;
        container.appendChild(star);
    }
}

function restartGame() {
    // Esconde tela de game over
    document.getElementById('game-over-screen').style.display = 'none';
    
    // Reseta o estado do jogo
    config.players[0].health = config.players[0].maxHealth;
    config.gamePaused = false;
    
    // Reinicia elementos do jogo
    particles = [];
    enemies = [];
    initParticles();
    config.wave.number = 1;
    config.wave.spawned = 0;
    config.wave.timer = 0;
    config.wave.enemiesToSpawn = 5;
    config.xp = 0;
    config.level = 1;
    config.particlesAbsorbed = 0;
    config.enemiesDestroyed = 0;
    config.skillPoints = 0;
    
    // Reseta habilidades
    for (const skill of Object.values(config.skills.tree)) {
        skill.currentLevel = 0;
    }
    
    // Atualiza UI
    updateHealthBar();
    updateXPBar();
    updateStatsPanel();
    updateQuestUI();
    
    // Reinicia miss√µes
    config.quests.active = [
        { id: 'absorb100', target: 100, current: 0, reward: 50, title: "Absorver 100 part√≠culas" },
        { id: 'defeat20', target: 20, current: 0, reward: 100, title: "Derrotar 20 inimigos" },
        { id: 'wave5', target: 5, current: 1, reward: 200, title: "Alcan√ßar onda 5" }
    ];
    config.quests.completed = [];
    
    // Reinicia o loop se necess√°rio
    if (!gameLoopRunning) {
        lastTime = performance.now();
        requestAnimationFrame(gameLoop);
    }
}

function resetGame() {
    restartGame();
    document.getElementById('menu').style.display = 'none';
    showUnlockMessage("Jogo reiniciado!");
}

// 9. SISTEMA DE UI
function updateHealthBar() {
    const healthPercent = (config.players[0].health / config.players[0].maxHealth) * 100;
    const healthBar = document.getElementById('health-bar');
    
    healthBar.style.width = `${healthPercent}%`;
    healthBar.style.backgroundColor = 
        healthPercent > 60 ? '#00F5A0' : 
        healthPercent > 30 ? '#FFA500' : '#FF0000';
    
    // Efeito de piscar quando a vida est√° baixa
    if (healthPercent < 30) {
        healthBar.style.animation = 'pulse 1s infinite';
    } else {
        healthBar.style.animation = 'none';
    }
}

function checkLevelUp() {
    const xpNeeded = config.level * 100;
    if (config.xp >= xpNeeded) {
        config.level++;
        config.xp -= xpNeeded;
        config.skillPoints++;
        showUnlockMessage(`N√≠vel ${config.level} alcan√ßado! +1 Ponto de Habilidade`);
        
        // Toca som de level up
        playSound('levelUp');
        
        updateXPBar();
        updateStatsPanel();
        checkBigBangUnlock();
        checkSkinUnlocks();
        checkForBossDialog();
    }
}

function updateXPBar() {
    const xpNeeded = config.level * 100;
    const xpPercent = (config.xp / xpNeeded) * 100;
    document.getElementById('xp-bar').style.width = `${xpPercent}%`;
    document.getElementById('xp-text').textContent = 
        `${config.xp}/${xpNeeded} XP (N√≠vel ${config.level})`;
}

function updateStatsPanel() {
    document.getElementById('stat-level').textContent = config.level;
    document.getElementById('stat-xp').textContent = `${config.xp}/${config.level * 100}`;
    document.getElementById('stat-particles').textContent = config.particlesAbsorbed;
    document.getElementById('stat-enemies').textContent = enemies.length;
    document.getElementById('stat-wave').textContent = config.wave.number;
}

function showUnlockMessage(message) {
    const el = document.createElement('div');
    el.className = 'unlock-message';
    el.textContent = message;
    document.body.appendChild(el);
    
    setTimeout(() => {
        el.style.opacity = '1';
        el.style.transform = 'translate(-50%, -50%) scale(1)';
        
        setTimeout(() => {
            el.style.opacity = '0';
            el.style.transform = 'translate(-50%, -50%) scale(0.5)';
            
            setTimeout(() => {
                document.body.removeChild(el);
            }, 300);
        }, 2000);
    }, 10);
}

// 10. INICIALIZA√á√ÉO DO SISTEMA DE SOM
function initSoundSystem() {
    // Configura√ß√£o inicial dos sons
    const soundPaths = {
        absorb: 'https://assets.mixkit.co/sfx/preview/mixkit-arcade-game-jump-coin-216.mp3',
        enemyDefeat: 'https://assets.mixkit.co/sfx/preview/mixkit-explosion-impact-1684.mp3',
        levelUp: 'https://assets.mixkit.co/sfx/preview/mixkit-unlock-game-notification-253.mp3',
        bigBang: 'https://assets.mixkit.co/sfx/preview/mixkit-big-explosion-2814.mp3',
        gameOver: 'https://assets.mixkit.co/sfx/preview/mixkit-arcade-retro-game-over-213.mp3',
        respawn: 'https://assets.mixkit.co/sfx/preview/mixkit-achievement-bell-600.mp3',
        bossRoar: 'https://assets.mixkit.co/sfx/preview/mixkit-monster-deep-rumble-395.mp3'
    };

    // Carrega os sons
    for (const [key, url] of Object.entries(soundPaths)) {
        config.soundEffects[key] = new Audio(url);
        config.soundEffects[key].volume = 0.5;
        config.soundEffects[key].muted = !config.soundEnabled;
        config.soundEffects[key].load(); // Pr√©-carrega o √°udio
    }

    // Carrega prefer√™ncia salva
    const savedSoundPref = localStorage.getItem('soundEnabled');
    if (savedSoundPref !== null) {
        config.soundEnabled = savedSoundPref === 'true';
    }
    document.getElementById('sound-status').textContent = config.soundEnabled ? 'ON' : 'OFF';
}

// 11. MODO HIST√ìRIA (COM BOSS C√ìSMICO)
function startStoryMode() {
    if (!config.story.enabled) return;
    
    config.gamePaused = true;
    document.getElementById('story-mode').style.display = 'flex';
    showStoryScene(0);
}

function showStoryScene(index) {
    if (index >= config.story.scenes.length) {
        endStoryMode();
        return;
    }
    
    config.story.currentScene = index;
    const scene = config.story.scenes[index];
    
    // Configura NPC (Boss ou Aliado)
    if (scene.effect === "terror") {
        document.getElementById('boss-npc').style.display = "block";
        document.getElementById('tentacles-container').style.display = "block";
        document.getElementById('story-npc').style.display = "none";
        document.getElementById('story-mode').classList.add("terror");
        document.querySelector('.story-dialog-box').classList.add("terror");
    } else {
        document.getElementById('boss-npc').style.display = "none";
        document.getElementById('tentacles-container').style.display = "none";
        document.getElementById('story-npc').style.display = "block";
        document.getElementById('story-mode').classList.remove("terror");
        document.querySelector('.story-dialog-box').classList.remove("terror");
    }
    
    // Tremor de tela para cenas intensas
    if (scene.shake) {
        document.getElementById('story-mode').classList.add("camera-shake");
        playSound("bossRoar");
    } else {
        document.getElementById('story-mode').classList.remove("camera-shake");
    }
    
    // Atualiza conte√∫do
    document.getElementById('story-npc').textContent = scene.npc;
    document.getElementById('boss-npc').textContent = scene.npc;
    document.getElementById('story-dialog-text').textContent = scene.text;
    document.body.style.background = scene.background;
}

function nextStoryDialog() {
    showStoryScene(config.story.currentScene + 1);
}

function endStoryMode() {
    document.getElementById('story-mode').style.display = 'none';
    config.gamePaused = false;
    config.story.enabled = false;
    initParticles();
}

// 12. NPC FIXO
function showNPCDialog() {
    if (!config.npc.active || config.level >= 50) return;

    const npcDialog = document.getElementById("npc-dialog");
    const npcText = document.getElementById("npc-text");
    
    npcDialog.classList.add("show");

    // Di√°logos baseados no progresso do jogador
    let dialog;
    
    if (config.level < 5) {
        // Di√°logos para iniciantes
        dialog = [
            "Come√ßando devagar, hein? N√£o se preocupe, todo mundo foi iniciante um dia...",
            "Essas part√≠culas s√£o s√≥ o b√°sico, espere at√© ver o que vem depois!",
            "Dica: Part√≠culas coloridas d√£o mais XP!"
        ][Math.floor(Math.random() * 3)];
    }
    else if (config.level < 15) {
        // Di√°logos intermedi√°rios
        dialog = [
            "Come√ßando a pegar o jeito, n√©? Mas n√£o fique muito confiante...",
            "J√° percebeu como os inimigos est√£o ficando mais espertos?",
            "O Big Bang est√° quase ao seu alcance... ser√° que voc√™ est√° pronto?"
        ][Math.floor(Math.random() * 3)];
    }
    else if (config.level < 30) {
        // Di√°logos avan√ßados
        dialog = [
            "Voc√™ est√° indo bem... mas o verdadeiro desafio est√° por vir!",
            "J√° notou como o universo muda conforme voc√™ avan√ßa?",
            "N√≠vel 30 √© onde a divers√£o realmente come√ßa..."
        ][Math.floor(Math.random() * 3)];
    }
    else {
        // Di√°logos para especialistas
        dialog = config.npc.dialogs[Math.floor(Math.random() * config.npc.dialogs.length)];
    }
    
    npcText.textContent = dialog;

    // Esconde o di√°logo ap√≥s 5 segundos
    setTimeout(() => {
        npcDialog.classList.remove("show");
    }, 5000);
}

function checkForBossDialog() {
    if (config.level === 50 && config.npc.active) {
        const npcText = document.getElementById("npc-text");
        const npcDialog = document.getElementById("npc-dialog");
        
        npcText.textContent = config.npc.bossDialog;
        npcDialog.classList.add("show");
        
        setTimeout(() => {
            npcDialog.classList.remove("show");
            config.npc.active = false; // NPC desaparece ap√≥s o Boss
        }, 7000);
    }
}

// 13. SISTEMA DE SKINS
function showSkinsModal() {
    const modal = document.getElementById('skins-modal');
    const grid = document.getElementById('skins-grid');
    
    grid.innerHTML = '';
    
    config.skins.available.forEach(skin => {
        const skinCard = document.createElement('div');
        skinCard.className = `skin-card ${skin.type} ${skin.id === config.skins.current ? 'selected' : ''} ${skin.unlocked ? '' : 'locked'}`;
        skinCard.innerHTML = `
            <div class="skin-emoji">${skin.emoji}</div>
            <div class="skin-name">${skin.name}</div>
            <div class="skin-type">${skin.type.toUpperCase()}</div>
            ${!skin.unlocked ? `<div class="skin-requirement">${skin.unlockCondition}</div>` : ''}
        `;
        
        if (skin.unlocked) {
            skinCard.addEventListener('click', () => {
                selectSkin(skin.id);
            });
        }
        
        grid.appendChild(skinCard);
    });
    
    modal.style.display = 'flex';
}

function selectSkin(skinId) {
    const skin = config.skins.available.find(s => s.id === skinId);
    if (!skin || !skin.unlocked) return;
    
    config.skins.current = skinId;
    config.players[0].face = skin.emoji;
    
    // Atualiza UI
    document.querySelectorAll('.skin-card').forEach(card => {
        card.classList.remove('selected');
        if (card.querySelector('.skin-name').textContent === skin.name) {
            card.classList.add('selected');
        }
    });
    
    showUnlockMessage(`Skin "${skin.name}" selecionada!`);
}

function checkSkinUnlocks() {
    config.skins.available.forEach(skin => {
        if (skin.unlocked) return;
        
        let unlocked = false;
        
        if (skin.unlockCondition.includes('n√≠vel') && 
            config.level >= parseInt(skin.unlockCondition.match(/n√≠vel (\d+)/)[1])) {
            unlocked = true;
        }
        else if (skin.unlockCondition.includes('inimigos') && 
                 config.enemiesDestroyed >= parseInt(skin.unlockCondition.match(/Derrotar (\d+) inimigos/)[1])) {
            unlocked = true;
        }
        else if (skin.unlockCondition.includes('miss√µes') && 
                 config.quests.active.length === 0) {
            unlocked = true;
        }
        
        if (unlocked && !skin.unlocked) {
            skin.unlocked = true;
            showUnlockMessage(`Skin desbloqueada: ${skin.name}!`);
        }
    });
}

// 14. RENDERIZA√á√ÉO
function render() {
    try {
        // Limpa o canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Aplica screen shake se necess√°rio
        const shakeX = config.screenShakeIntensity > 0 ? 
            (Math.random() - 0.5) * config.screenShakeIntensity : 0;
        const shakeY = config.screenShakeIntensity > 0 ? 
            (Math.random() - 0.5) * config.screenShakeIntensity : 0;
        
        ctx.save();
        ctx.translate(shakeX, shakeY);
        
        // Reduz o screen shake gradualmente
        if (config.screenShakeIntensity > 0) {
            config.screenShakeIntensity -= 0.5;
        }
        
        // Desenha part√≠culas
        particles.forEach(p => {
            // Trilha
            p.trail.forEach((trail, i) => {
                const alpha = i / p.trail.length;
                ctx.fillStyle = p.color.replace(')', `, ${alpha})`).replace('hsl', 'hsla');
                ctx.beginPath();
                ctx.arc(trail.x, trail.y, trail.size * alpha, 0, Math.PI * 2);
                ctx.fill();
            });
            
            // Part√≠cula principal
            ctx.fillStyle = p.color;
            ctx.beginPath();
            ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
            ctx.fill();
        });
        
        // Desenha jogador 1
        const player = config.players[0];
        ctx.fillStyle = player.color;
        ctx.beginPath();
        ctx.arc(player.x, player.y, player.size, 0, Math.PI * 2);
        ctx.fill();
        
        ctx.font = `${player.faceSize}px Arial`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(player.face, player.x, player.y);
        
        // Desenha jogador 2 se o modo coop estiver ativo
        if (config.coopMode && config.players[1].active) {
            const player2 = config.players[1];
            ctx.fillStyle = player2.color;
            ctx.beginPath();
            ctx.arc(player2.x, player2.y, player2.size, 0, Math.PI * 2);
            ctx.fill();
            
            ctx.font = `${player2.faceSize}px Arial`;
            ctx.fillText(player2.face, player2.x, player2.y);
        }
        
        // Desenha inimigos
        enemies.forEach(enemy => {
            // Corpo do inimigo
            ctx.fillStyle = enemy.color;
            ctx.beginPath();
            ctx.arc(enemy.x, enemy.y, enemy.size, 0, Math.PI * 2);
            ctx.fill();
            
            // Destaque para elites
            if (enemy.isElite) {
                ctx.strokeStyle = 'gold';
                ctx.lineWidth = 3;
                ctx.stroke();
                
                // Efeito de brilho
                ctx.fillStyle = 'rgba(255, 215, 0, 0.3)';
                ctx.beginPath();
                ctx.arc(enemy.x, enemy.y, enemy.size + 5, 0, Math.PI * 2);
                ctx.fill();
            }
            
            // Rosto do inimigo
            ctx.font = `${enemy.size * 0.8}px Arial`;
            ctx.fillStyle = 'white';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(enemy.face, enemy.x, enemy.y);
        });
        
        ctx.restore();
    } catch (error) {
        console.error("Erro na renderiza√ß√£o:", error);
    }
}

// 15. GAME LOOP (COM RESPAWN AUTOM√ÅTICO)
function gameLoop(timestamp) {
    try {
        // Calcula deltaTime
        const deltaTime = timestamp - lastTime;
        lastTime = timestamp;
        
        // Atualiza FPS counter
        frameCount++;
        if (timestamp - fpsLastChecked >= 1000) {
            fps = Math.round((frameCount * 1000) / (timestamp - fpsLastChecked));
            document.getElementById('fps-counter').textContent = `FPS: ${fps}`;
            fpsLastChecked = timestamp;
            frameCount = 0;
        }
        
        // Processa f√≠sica em intervalos fixos
        const physicsSteps = Math.min(Math.floor(deltaTime / (1000/60)), 3);
        for (let i = 0; i < physicsSteps; i++) {
            updatePhysics(1000/60);
        }
        
        // Renderiza√ß√£o
        render();
        
        gameLoopRunning = true;
        requestAnimationFrame(gameLoop);
    } catch (error) {
        console.error("Erro no game loop:", error);
        initGame();
    }
}

function updatePhysics(deltaTime) {
    if (config.gamePaused) return;
    
    // Verifica desbloqueio do Big Bang
    checkBigBangUnlock();
    
    // Atualiza cooldown
    if (config.bigBang.cooldown > 0) {
        config.bigBang.cooldown--;
        updateBigBangCooldownUI();
    }
    
    // Verifica respawn de part√≠culas
    if (config.gameTime % config.particleRespawn.checkInterval === 0) {
        autoRespawnParticles();
    }
    config.gameTime++;
    
    // Atualiza part√≠culas
    updateParticles(deltaTime);
    
    // Atualiza inimigos
    updateEnemies(deltaTime);
    
    // Atualiza sistema de ondas
    config.wave.update();
}

// 16. INICIALIZA√á√ÉO DO JOGO
function initGame() {
    try {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        
        config.players[0].x = canvas.width/2;
        config.players[0].y = canvas.height/2;
        
        initSoundSystem();
        setupControls();
        updateHealthBar();
        updateXPBar();
        updateStatsPanel();
        updateQuestUI();
        updateBigBangRequirement();
        
        // Atualiza miss√µes com progresso atual
        updateQuest('absorb100', 0);
        updateQuest('defeat20', 0);
        updateQuest('wave5', 0);
        
        // Inicia di√°logos do NPC
        setInterval(showNPCDialog, 5000 + Math.random() * 10000);
        
        // Inicia com o modo hist√≥ria se for a primeira vez
        const hasPlayedBefore = localStorage.getItem('hasPlayedBefore');
        if (!hasPlayedBefore) {
            startStoryMode();
            localStorage.setItem('hasPlayedBefore', 'true');
        } else {
            initParticles();
        }
        
        // Inicia o game loop
        lastTime = performance.now();
        requestAnimationFrame(gameLoop);
    } catch (error) {
        console.error("Erro na inicializa√ß√£o:", error);
        setTimeout(initGame, 1000);
    }
}

// Inicia o jogo quando a p√°gina carrega
window.addEventListener('load', initGame);
window.addEventListener('resize', () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
});
